# Exploiting Embedded Devices

## Static Analysis of Vulnerabilities

Static analysis of vulnerabilities involves looking for vulnerabilities by
inspecting the update packages, file systems, and binaries of the system
without having to power up the device being evaluated.

### Analyzing the Update Package

#### Tools
- unzip
- binwalk
- Firmware Mod Kit

#### D-Link DAP-1320

##### Download Firmware

- https://files.dlink.com.au/products/DAP-1320/REV_A/Firmware/Firmware_v1.10b14/


##### Install Firmware Mod Kit

```
udo apt-get install git build-essential zlib1g-dev liblzma-dev python3-magic
```

##### Clone Firmware Mod Kit

```
git clone https://github.com/rampageX/firmware-mod-kit

export PATH=$PATH:/root/DAP-1320/firmware-mod-kit
```

##### Extract Firmware

```
sudo ./extract-firmware.sh ~/Downloads/DAP-1320_A1_FW110B14.bin
```

##### Browse Extracted Directory

```
cd fmk
ls rootfs
ls rootfs/bin

# Verify if binaries are compiled for MIPS
file rootfs/bin/busybox

# Locate executable files
find . -type -f -perm /u+x

# Determine the directory structure
find . -type d

# Find web servers or associated technologies
find . -type f -perm /u+x -name "*httpd*" -o -name "*cgi*" -o -name "*nginx*"

# Find library versions
for i in `find . -type d -name lib`; do find $i -type f; done

# Find HTML, Javascript, CGI, and config files
find . -name "*htm*" -o -name "*.js" -o -name "*.cgi*" -o -name "*.conf*"

# Look for an executable version (for example, with lighttpd)
strings sbin/lighttpd | grep lighttpd 

# Look for configuration files
find . -name *.conf
```

**NOTE**

```
Any executable or library found that has a version needs to be cross-
checked against known vulnerabilities. For example, use a Google search of

<name> <version number> vulnerability
```


### Performing Vulnerability Analysis

#### Common Vulnerabilities
- Command-Injection
- Format-String
- Buffer-Overflow
- Use-After-Free
- Misconfiguration
- and more


#### Look for format strings (%s)

```
strings bin/ssi | grep "%s" | grep "/dev/null"
```

#### Reverse Engineering SSI Binary

```
After opening
the ssi binary in Ghidra and ensuring that the processor is set to MIPS, we then take the following steps:

1. Search for the string of interest.
2. Determine how the string is used.
3. Determine where the URL comes from (if it is hardcoded, we are not interested in it).
```

#### Grep download_fw_lp

```
grep -r download_fw_lp

grep -C 7 download_fw_lp www/Firmware.htm
```

At this point, we will move on to attempting to exploit the device through the firmware update.


### Dynamic Analysis with Hardware

The static analysis portion of the assessment is complete. From this point
forward, we will be looking at the system as it runs. We need to set up an
environment for intercepting requests from the device to the WAN, connect
the DAP-1320 to our test network, and begin exercising the firmware update process. The end goal is to execute something on the wireless extender
through command injection.

#### The Test Environment Setup

The test setup weâ€™ve chosen uses 64-bit Kali Linux 2017, Ettercap, the DAP-
1320 wireless range extender with firmware version 1.11, and a stock
wireless network. The idea is to ARP-spoof the DAP-1320 so that all traffic
to and from the device goes through our Kali Linux system. Although we
could have simply put a device inline between the extender and the router
that can forward traffic after inspection and modification, ARP spoofing
would be the likely attack mechanism used in the field.

##### Ettercap

```
ettercap -T -q -M arp:remote /<device ip>// /<router ip>//
```


##### Wireshark

- Click on the New Firmware button and then follow the TCP Stream within Wireshark.


##### Ettercap Filter

```


```




























# REFERENCES

- D-Link Vulnerability: www.kb.cert.org/vuls/id/184100